import { AxiosInstance } from 'axios';
import type { ClientConfig, GameMap, GameMode, GameType, Locales, Queue, Region, Season } from './types';
import { AccountManager, ChampionManager, ItemManager, LeagueManager, MatchManager, RuneTreeManager, SummonerManager, SummonerSpellManager, CurrentGameManager, ClashManager, ChallengeManager } from './managers';
import { ApiHandler } from './api';
/**
 * The shieldbow client that enables you to interact with Riot Games' League of Legends API.
 * Also connects to the Data Dragon + Community Dragon CDNs.
 */
export declare class Client {
    private readonly _cdnBase;
    private readonly _versions;
    private _initialized;
    private _version;
    private _patch;
    private _locale;
    private _region;
    private _cacheEnabled;
    private _cacheRoot;
    private _champions;
    private _items;
    private _runes;
    private _summonerSpells;
    private readonly _summoners;
    private readonly _accounts;
    private readonly _leagues;
    private readonly _matches;
    private readonly _spectator;
    private readonly _challenges;
    private readonly _clash;
    private readonly _http;
    private readonly _api;
    private _seasons;
    private _queues;
    private _maps;
    private _gameModes;
    private _gameTypes;
    constructor(apiKey: string);
    /**
     * Initialize the client to prepare it for interacting with the API.
     * This can also be rerun if you want to configure anything and quickly fetch any required data.
     *
     * @param options - The client configuration.
     */
    initialize(options?: ClientConfig): Promise<void>;
    /**
     * Ensure that client was initialized
     */
    private _ensureInitialized;
    /**
     * The axios instance that handles all the CDN requests being made.
     */
    get http(): AxiosInstance;
    /**
     * The default API interactions handler used by the client.
     */
    get api(): ApiHandler;
    /**
     * The league of legends region from which the data is to be fetched.
     */
    get region(): Region;
    set region(region: Region);
    /**
     * The Data Dragon CDN Base URL
     */
    get cdnBase(): string;
    /**
     * The default champions manager used by the client.
     */
    get champions(): ChampionManager;
    /**
     * The default items manager used by the client.
     */
    get items(): ItemManager;
    /**
     * The default runes manager used by the client.
     */
    get runes(): RuneTreeManager;
    /**
     * The default summoner spells manager used by the client.
     */
    get summonerSpells(): SummonerSpellManager;
    /**
     * The default summoners manager used by the client.
     */
    get summoners(): SummonerManager;
    /**
     * The default riot accounts manager used by the client.
     * This is mostly for internal usage. You may want to use {@link Client.summoners} instead.
     */
    get accounts(): AccountManager;
    /**
     * The default summoner competitive league data manager used by the client.
     *
     * Highly recommended using {@link Client.summoners} for a specific summoner's competitive info.
     *
     * Use this only if you want to query a list of users by rank-division.
     */
    get leagues(): LeagueManager;
    /**
     * The default match manager used by the client.
     */
    get matches(): MatchManager;
    /**
     * The default LOL challenges manager used by the client.
     */
    get challenges(): ChallengeManager;
    /**
     * The default live match manager used by the client.
     */
    get spectator(): CurrentGameManager;
    /**
     * The default clash tournaments manager used by the client.
     */
    get clash(): ClashManager;
    /**
     * Get the current status of the RIOT API.
     *
     * No type support for this (yet).
     */
    get status(): Promise<unknown>;
    /**
     * Update the locale in which the data is fetched.
     *
     * @param newLocale - The new locale to use for the future requests.
     * @param refetch - Whether to fetch all data dragon data in the new locale right away.
     */
    updateLocale(newLocale: Locales, refetch?: boolean): Promise<void>;
    /**
     * Update the patch from which the data is fetched.
     *
     * NOTE: The patch must be 2 integers separated by a `.`.
     * For example: `10.11` or `12.9`.
     *
     * This should NOT be the data dragon version.
     *
     * @param patch - The new patch to use for the future requests.
     * @param refetch - Whether to fetch all data dragon data from the new patch right away.
     */
    updatePatch(patch: string, refetch?: boolean): Promise<void>;
    /**
     * The current Data Dragon CDN version.
     */
    get version(): string;
    /**
     * The patch of the game currently in use.
     *
     * Must be above 5.1 for proper functionality.
     */
    get patch(): string;
    /**
     * Is this client initialized.
     */
    get initialized(): boolean;
    /**
     * The locale in which all the data is going to be fetched in.
     */
    get locale(): "en_US" | "cs_CZ" | "de_DE" | "el_GR" | "en_AU" | "en_GB" | "en_PH" | "en_SG" | "es_AR" | "es_ES" | "es_MX" | "fr_FR" | "hu_HU" | "id_ID" | "it_IT" | "ja_JP" | "ko_KR" | "pl_PL" | "pt_BR" | "ro_RO" | "ru_RU" | "th_TH" | "tr_TR" | "vn_VN" | "zh_CN" | "zh_MY" | "zh_TW";
    set patch(patch: string);
    /**
     * An array of all seasons and their respective IDs.
     */
    get seasons(): Season[];
    /**
     * An array of all queue types and their respective data.
     */
    get queues(): Queue[];
    /**
     * An array of all maps and their respective data.
     */
    get maps(): GameMap[];
    /**
     * An array of all game modes and their respective data.
     */
    get gameModes(): GameMode[];
    /**
     * An array of all game types and their respective data.
     */
    get gameTypes(): GameType[];
}
//# sourceMappingURL=client.d.ts.map