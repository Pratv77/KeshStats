import type { Client } from '../client';
import type { ItemData, GameMap } from '../types';
import type { Champion } from './index';
import type { Collection } from '@discordjs/collection';
/**
 * The item's gold value information.
 */
export interface ItemGoldValue {
    /**
     * The base value for this item.
     * This does not include the value of this item's components.
     */
    base: number;
    /**
     * The total gold value for this item.
     * This includes the value of this item's components.
     */
    total: number;
    /**
     * The selling price of this item.
     */
    sell: number;
}
/**
 * A representation of an in-game item.
 */
export declare class Item {
    private readonly client;
    /**
     * The 4-digit unique ID (numerical ID as a string) of the item.
     */
    readonly id: string;
    /**
     * The displayed name of this item.
     */
    readonly name: string;
    /**
     * A short-description of this object.
     * `plaintext` attribute in the data dragon file.
     */
    readonly description: string;
    /**
     * More detailed description of the item.
     * Raw details contain some html-like tags.
     * This is the raw details from the data dragon API.
     *
     * See {@link Item.details | details} if you want to see it with the tags processed out.
     */
    readonly rawDetails: string;
    /**
     * Whether this item is a consumable.
     *
     * Consumables give you temporary buffs or vision after consumption.
     */
    readonly consumable: boolean;
    /**
     * Whether this item is automatically consumed if you do not have an available item slot.
     */
    readonly consumeOnFull: boolean;
    /**
     * If this has a value, it means this item can be stacked in the same item slot.
     * The value indicates the quantity of this item you can store in one slot.
     */
    readonly stacks?: number;
    private readonly fromIds;
    private readonly intoIds;
    private readonly specialRecipeId?;
    /**
     * Whether this item is listed in the in-game store.
     */
    readonly inStore: boolean;
    /**
     * Whether this item can be bought from the store.
     */
    readonly hideFromAll: boolean;
    private _requiredChampion?;
    /**
     * A link to the image assigned to this item in-game.
     */
    readonly image: string;
    /**
     * The value of this item in terms of in-game gold.
     */
    readonly goldValue: ItemGoldValue;
    /**
     * Some tags assigned to this item.
     */
    readonly tags: string[];
    /**
     * The list of maps on which you can buy this item.
     */
    readonly availability: GameMap[];
    /**
     * A list of stats this item provides.
     * To learn more about these stats, {@link https://developer.riotgames.com/docs/lol#data-dragon_items | documentation}
     */
    readonly stats: {
        [key: string]: number;
    };
    /**
     * The kind of item this is in-game.
     * By default, all items are set to be `Basic`.
     * There might be some issues with items that do not have their `depth` set in the data dragon JSON.
     */
    readonly kind: 'Basic' | 'Epic' | 'Legendary' | 'Mythic';
    /**
     * Create a new item instance.
     * @param client - The client requesting the data.
     * @param id - The ID of the item.
     * @param data - The raw item data from data dragon.
     */
    constructor(client: Client, id: string, data: ItemData);
    /**
     * If this is not undefined, then this item can only be bought/owned by this champion.
     */
    get requiredChampion(): Champion | undefined;
    /**
     * More detailed description of the item.
     * This is the processed details.
     * With all the HTML-like tags removed.
     *
     * See {@link Item.rawDetails | rawDetails} if you want the raw data.
     */
    get details(): string;
    /**
     * The components of this item.
     * You need to buy these item and spend additional gold to get this item.
     */
    get from(): Collection<string, Item>;
    /**
     * A collection of items the current item is a component of.
     */
    get into(): Collection<string, Item>;
    /**
     * If this is not undefined, you cannot buy this item from the store.
     * Instead, you need to buy the `specialRecipe` item and complete a quest to get it.
     */
    get specialRecipe(): Item | undefined;
    private parseDepth;
}
//# sourceMappingURL=Item.d.ts.map