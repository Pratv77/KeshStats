"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrentGameParticipant = void 0;
const collection_1 = require("@discordjs/collection");
const CurrentGamePerks_1 = require("./CurrentGamePerks");
/**
 * A representation of a participant in a live game.
 */
class CurrentGameParticipant {
    /**
     * Creates a new Current Game Participant instance.
     * @param client - The client that requested this data.
     * @param data - The raw current game participant data from the API.
     */
    constructor(client, data) {
        /**
         * The client that instantiated this participant.
         */
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The ID of the team this participant belongs to.
         */
        Object.defineProperty(this, "teamId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The summoner spells being used by this participant.
         */
        Object.defineProperty(this, "summonerSpells", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The champion being played by this participant.
         */
        Object.defineProperty(this, "champion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Whether the participant is a bot.
         */
        Object.defineProperty(this, "bot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The summoner name of this participant.
         */
        Object.defineProperty(this, "summonerName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A link to the participant's profile icon.
         */
        Object.defineProperty(this, "profileIcon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The rune setups of this participant.
         */
        Object.defineProperty(this, "perks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.teamId = data.teamId;
        this.summonerSpells = new collection_1.Collection();
        this.summonerSpells.set('D', client.summonerSpells.cache.find((s) => s.key === data.spell1Id));
        this.summonerSpells.set('F', client.summonerSpells.cache.find((s) => s.key === data.spell2Id));
        this.champion = client.champions.cache.find((c) => c.key === data.championId);
        this.bot = data.bot;
        this.summonerName = data.summonerName;
        this.profileIcon = `${client.cdnBase}${client.version}/img/profileicon/${data.profileIconId}.png`;
        if (data.perks)
            this.perks = new CurrentGamePerks_1.CurrentGamePerks(client, data.perks);
    }
    /**
     * Fetches the summoner info of this participant.
     *
     * @param options - The basic fetching options.
     */
    fetchSummoner(options) {
        return this._client.summoners.fetchBySummonerName(this.summonerName, options);
    }
}
exports.CurrentGameParticipant = CurrentGameParticipant;
//# sourceMappingURL=CurrentGameParticipant.js.map