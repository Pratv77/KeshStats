import type { Client } from '../client';
import type { GameMap, GameMode, GameType, MatchData, Queue, Region } from '../types';
import { Collection } from '@discordjs/collection';
import { Team } from './Team';
import type { MatchTimeline } from './MatchTimeline';
/**
 * A representation of a league of legends match.
 */
export declare class Match {
    private readonly client;
    /**
     * The match ID.
     */
    readonly id: string;
    /**
     * The data version of the match.
     */
    readonly version: string;
    /**
     * The timestamp of creation of the match (before summoners spawn on the rift).
     */
    readonly createdTimestamp: number;
    /**
     * The timestamp of the beginning of the match (when summoners spawn on the rift).
     */
    readonly startTimestamp: number;
    /**
     * The duration of the match (in seconds).
     */
    readonly duration: number;
    /**
     * The timestamp of the end of the match.
     */
    readonly endTimestamp: number;
    /**
     * The ID of the game.
     */
    readonly gameId: number;
    /**
     * The game mode for the match.
     */
    readonly gameMode: GameMode;
    /**
     * The name of the match.
     */
    readonly gameName: string;
    /**
     * The type of game.
     */
    readonly gameType: GameType;
    /**
     * The version of the game.
     */
    readonly gameVersion: string;
    /**
     * The map on which the match was played.
     */
    readonly map: GameMap;
    /**
     * The region in which the match was played.
     *
     * Eg: `NA` or `EUW`.
     */
    readonly region: Region;
    /**
     * The queue type of the match.
     */
    readonly queue: Queue;
    /**
     * The tournament code of the match (if it is the part of a tournament).
     */
    readonly tournamentCode: string;
    /**
     * The 2 teams participating in the match.
     *
     * They are mapped by their map sides (`blue` and `red`).
     */
    readonly teams: Collection<'blue' | 'red', Team>;
    /**
     * Creates a new match instance.
     * @param client - The client requesting the data.
     * @param data - The raw match data from the API.
     */
    constructor(client: Client, data: MatchData);
    /**
     * Fetch the timeline of the match.
     */
    fetchTimeline(): Promise<MatchTimeline>;
    /**
     * Checks received match data for traits of a bugged match.
     * @param data - The raw match data from the API.
     */
    private _isDataMalformed;
    private _regionFromPlatformId;
}
//# sourceMappingURL=Match.d.ts.map