import type { BaseManager, FetchOptions } from '../types';
import type { Client } from '../client';
import { Collection } from '@discordjs/collection';
import { Account, Summoner } from '../structures';
/**
 * A summoner manager - to fetch and manage all the summoner data.
 */
export declare class SummonerManager implements BaseManager<Summoner> {
    /**
     * The summoners cached in the memory.
     *
     * Only use this if you absolutely must.
     * Prioritize using
     * {@link SummonerManager.fetch | fetch},
     * {@link SummonerManager.fetchBySummonerName | fetchBySummonerName} or
     * {@link SummonerManager.fetchByPlayerId | fetchByPlayerId}
     * instead.
     */
    readonly cache: Collection<string, Summoner>;
    /**
     * The client this manager belongs to.
     */
    readonly client: Client;
    /**
     * Creates a new summoner manager.
     * @param client - The client that instantiated this manager.
     */
    constructor(client: Client);
    /**
     * Fetch a summoner by its summoner ID.
     *
     * @param id - The summoner ID of the summoner.
     * @param options - The basic fetching options.
     */
    fetch(id: string, options?: FetchOptions): Promise<Summoner>;
    /**
     * Fetch a summoner by its unique PUUID.
     *
     * @param playerId - The PUUID of the summoner or associated RIOT account.
     * @param options - The basic fetching options.
     */
    fetchByPlayerId(playerId: string | Account, options?: FetchOptions): Promise<Summoner>;
    /**
     * Fetch a summoner by its summoner name.
     *
     * @param name - The summoner name of the summoner to fetch.
     * @param options - The basic fetching options.
     */
    fetchBySummonerName(name: string, options?: FetchOptions): Promise<Summoner>;
}
//# sourceMappingURL=SummonerManager.d.ts.map