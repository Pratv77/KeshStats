"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeagueManager = void 0;
const structures_1 = require("../structures");
const collection_1 = require("@discordjs/collection");
/**
 * A league manager - to fetch and manage all summoner competitive info.
 */
class LeagueManager {
    /**
     * Creates a new League manager.
     * @param client - The client that instantiated this manager.
     */
    constructor(client) {
        /**
         * The client this manager belongs to.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The competitive info (mapped by summoner ID) stored in the memory.
         *
         * Only use this if you absolutely must.
         * Prioritize using
         * {@link LeagueManager.fetch | fetch} or
         * {@link LeagueManager.fetchByQueueAndTier | fetchByQueueAndTier}
         * instead.
         */
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The in-memory cache for league lists.
         *
         * Only use this if you absolutely must.
         * Prioritize using {@link LeagueManager.fetchByLeagueId | fetchByLeagueId} instead.
         */
        Object.defineProperty(this, "listCache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.cache = new collection_1.Collection();
        this.listCache = new collection_1.Collection();
    }
    /**
     * Fetch a summoner's competitive info by the summoner's ID.
     *
     * @param id - The ID of the summoner whose competitive info you want to find.
     * @param options - The basic fetching options.
     */
    async fetch(id, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? this.cache;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cache.has(id) && !force)
                resolve(this.cache.get(id));
            else {
                const response = await this.client.api
                    .makeApiRequest('/lol/league/v4/entries/by-summoner/' + id, {
                    region,
                    regional: false,
                    name: 'League Entry by summoner ID',
                    params: `Summoner ID: ${id}`
                })
                    .catch(reject);
                if (response) {
                    const data = response.data;
                    if (data && data.length) {
                        const entries = new collection_1.Collection();
                        for (const entry of data)
                            entries.set(entry.queueType, new structures_1.LeagueEntry(this.client, entry));
                        if (cache)
                            this.cache.set(id, entries);
                        resolve(entries);
                    }
                    else
                        reject('No league entries found.');
                }
            }
        });
    }
    /**
     * Fetch a collection of league entries by the queue type, tier and division.
     *
     * @param queue - The type of queue - RANKED_SOLO_5x5, RANKED_FLEX_SR, etc.
     * @param tier - The tier of the entries - IRON to CHALLENGER.
     * @param division - The division of the entries - I, II, III, IV.
     * @param options - The basic fetching options (and page number - defaults to 1, force is ignored - always true).
     */
    async fetchByQueueAndTier(queue, tier, division, options) {
        const cache = options?.cache ?? this.cache;
        const region = options?.region ?? this.client.region;
        const page = options?.page ?? 1;
        return new Promise(async (resolve, reject) => {
            const response = await this.client.api
                .makeApiRequest(`/lol/league-exp/v4/entries/${queue}/${tier}/${division}?page=${page}`, {
                region,
                regional: false,
                name: 'League Entry by queue and tier',
                params: `Queue: ${queue}, Tier: ${tier}, Division: ${division}`
            })
                .catch(reject);
            if (response) {
                const data = response.data;
                if (data && data.length) {
                    const result = new collection_1.Collection();
                    for (const entry of data) {
                        const { summonerId, queueType } = entry;
                        const entries = this.cache.get(summonerId) || new collection_1.Collection();
                        const newEntry = new structures_1.LeagueEntry(this.client, entry);
                        entries.set(queueType, newEntry);
                        if (cache)
                            this.cache.set(summonerId, entries);
                        result.set(summonerId, newEntry);
                    }
                    resolve(result);
                }
                else
                    reject('No league entries found for the provided parameters.');
            }
        });
    }
    /**
     * Fetch the league entries by a league ID.
     *
     * @param leagueId - The League ID.
     * @param options - The basic fetching options (exception: `force` defaults to true).
     */
    async fetchByLeagueId(leagueId, options) {
        const force = options?.force ?? true;
        const cache = options?.cache ?? this.cache;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.listCache.has(leagueId) && !force)
                resolve(this.listCache.get(leagueId));
            else {
                const response = await this.client.api
                    .makeApiRequest(`/lol/league/v4/leagues/${leagueId}`, {
                    region,
                    regional: false,
                    name: 'League Entry by league ID',
                    params: `League ID: ${leagueId}`
                })
                    .catch(reject);
                if (response && response.data) {
                    const data = response.data;
                    const list = new structures_1.LeagueList(this.client, data);
                    if (cache) {
                        for (const entry of list.entries.values()) {
                            const { summonerId, queueType } = entry;
                            const entries = this.cache.get(summonerId) || new collection_1.Collection();
                            entries.set(queueType, entry);
                            this.cache.set(summonerId, entries);
                        }
                        this.listCache.set(leagueId, list);
                    }
                    resolve(list);
                }
                else
                    reject('No league entries found for the provided parameters.');
            }
        });
    }
}
exports.LeagueManager = LeagueManager;
//# sourceMappingURL=LeagueManager.js.map