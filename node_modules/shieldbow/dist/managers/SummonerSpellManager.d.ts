import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { SummonerSpell } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * A spell manager - to fetch and manage all summoner spell data.
 */
export declare class SummonerSpellManager implements BaseManager<SummonerSpell> {
    /**
     * A collection of the summoner spells cached in the memory.
     *
     * Only use this if you absolutely must.
     * Prioritize using {@link SummonerSpellManager.fetch | fetch} instead.
     */
    readonly cache: Collection<string, SummonerSpell>;
    /**
     * The client this manager belongs to.
     */
    readonly client: Client;
    private readonly _spellsData?;
    /**
     * Creates a new summoner spell manager.
     * @param client - The client this manager belongs to.
     * @param cacheSettings - The cache settings to use.
     */
    constructor(client: Client, cacheSettings: {
        enable: boolean;
        root: string;
    });
    private _fetchLocalSpells;
    private _fetchAll;
    /**
     * Fetch a spell by its ID. The ID is usually something like Summoner\{Spell\}
     * For example, for the spell `Flash`, the ID is `SummonerFlash`.
     * But there are a lot of exceptions to this,
     * so it is recommended to use {@link SummonerSpellManager.fetchByName | fetchByName} instead.
     *
     * @param key - The ID of the spell to fetch.
     * @param options - The basic fetching options.
     */
    fetch(key: string, options?: FetchOptions): Promise<SummonerSpell>;
    /**
     * Find a spell by its name.
     *
     * @deprecated Please use {@link SummonerSpellManager.fetchByName | fetchByName} instead.
     * @param name - The name of the spell to look for.
     */
    findByName(name: string): Promise<SummonerSpell | undefined>;
    /**
     * Fetch a spell by its name.
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the spell to look for.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<SummonerSpell | undefined>;
}
//# sourceMappingURL=SummonerSpellManager.d.ts.map