"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummonerManager = void 0;
const collection_1 = require("@discordjs/collection");
const structures_1 = require("../structures");
/**
 * A summoner manager - to fetch and manage all the summoner data.
 */
class SummonerManager {
    /**
     * Creates a new summoner manager.
     * @param client - The client that instantiated this manager.
     */
    constructor(client) {
        /**
         * The summoners cached in the memory.
         *
         * Only use this if you absolutely must.
         * Prioritize using
         * {@link SummonerManager.fetch | fetch},
         * {@link SummonerManager.fetchBySummonerName | fetchBySummonerName} or
         * {@link SummonerManager.fetchByPlayerId | fetchByPlayerId}
         * instead.
         */
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The client this manager belongs to.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.cache = new collection_1.Collection();
    }
    /**
     * Fetch a summoner by its summoner ID.
     *
     * @param id - The summoner ID of the summoner.
     * @param options - The basic fetching options.
     */
    async fetch(id, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cache.has(id) && !force)
                resolve(this.cache.get(id));
            else {
                const response = await this.client.api
                    .makeApiRequest('/lol/summoner/v4/summoners/' + id, {
                    region,
                    regional: false,
                    name: 'Summoner by ID',
                    params: `ID: ${id}`
                })
                    .catch(reject);
                if (response) {
                    const data = response.data;
                    const summoner = new structures_1.Summoner(this.client, data, region);
                    if (cache)
                        this.cache.set(summoner.id, summoner);
                    resolve(summoner);
                }
            }
        });
    }
    /**
     * Fetch a summoner by its unique PUUID.
     *
     * @param playerId - The PUUID of the summoner or associated RIOT account.
     * @param options - The basic fetching options.
     */
    async fetchByPlayerId(playerId, options) {
        const id = typeof playerId === 'string' ? playerId : playerId.playerId;
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cache.find((s) => s.playerId === id) && !force)
                resolve(this.cache.find((s) => s.playerId === id));
            else {
                const response = await this.client.api
                    .makeApiRequest('/lol/summoner/v4/summoners/by-puuid/' + id, {
                    region,
                    regional: false,
                    name: 'Summoner by player ID',
                    params: `ID: ${id}`
                })
                    .catch(reject);
                if (response) {
                    const data = response.data;
                    const summoner = new structures_1.Summoner(this.client, data, region);
                    if (cache)
                        this.cache.set(summoner.id, summoner);
                    resolve(summoner);
                }
            }
        });
    }
    /**
     * Fetch a summoner by its summoner name.
     *
     * @param name - The summoner name of the summoner to fetch.
     * @param options - The basic fetching options.
     */
    async fetchBySummonerName(name, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cache.find((s) => s.name === name) && !force)
                resolve(this.cache.find((s) => s.name === name));
            else {
                const response = await this.client.api
                    .makeApiRequest('/lol/summoner/v4/summoners/by-name/' + encodeURIComponent(name), {
                    region,
                    regional: false,
                    name: 'Summoner by summoner name',
                    params: `ID: ${name}`
                })
                    .catch(reject);
                if (response) {
                    const data = response.data;
                    const summoner = new structures_1.Summoner(this.client, data, region);
                    if (cache)
                        this.cache.set(summoner.id, summoner);
                    resolve(summoner);
                }
            }
        });
    }
}
exports.SummonerManager = SummonerManager;
//# sourceMappingURL=SummonerManager.js.map