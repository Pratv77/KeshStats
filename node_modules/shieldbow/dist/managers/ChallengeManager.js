"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChallengeManager = void 0;
const structures_1 = require("../structures");
const collection_1 = require("@discordjs/collection");
/**
 * A challenge manager - to fetch and manage all the challenges data.
 */
class ChallengeManager {
    constructor(client) {
        /**
         * The client this manager belongs to.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The challenge info (mapped by challenge ID) stored in the memory.
         */
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The challenge leaderboards (mapped by region and tier type) stored in the memory.
         */
        Object.defineProperty(this, "leaderBoardCache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The challenge progressions of a summoner (mapped by summoner ID).
         */
        Object.defineProperty(this, "summonerProgressionCache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.cache = new collection_1.Collection();
        this.leaderBoardCache = new collection_1.Collection();
        this.summonerProgressionCache = new collection_1.Collection();
    }
    /**
     * Fetch all challenges.
     * @param options - The basic fetching options (force is ignored here).
     */
    fetchAll(options) {
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            const result = new collection_1.Collection();
            const cResponse = await this.client.api.makeApiRequest(`/lol/challenges/v1/challenges/config`, {
                region,
                regional: false,
                name: 'All challenges config',
                params: ''
            });
            const pResponse = await this.client.api.makeApiRequest(`/lol/challenges/v1/challenges/percentiles`, {
                region,
                regional: false,
                name: 'All challenges percentiles',
                params: ''
            });
            if (cResponse.status !== 200)
                reject(cResponse);
            else if (pResponse.status !== 200)
                reject(pResponse);
            else {
                const data = cResponse.data;
                const percentiles = pResponse.data;
                for (const challenge of data) {
                    const c = new structures_1.Challenge(this.client, challenge, percentiles[challenge.id.toString()]);
                    if (cache)
                        this.cache.set(c.id, c);
                    result.set(c.id, c);
                }
                resolve(result);
            }
        });
    }
    /**
     * Fetch a challenge by the challenge ID.
     *
     * @param id - The ID of the challenge you want to find.
     * @param options - The basic fetching options.
     */
    async fetch(id, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (!force && this.cache.has(id))
                resolve(this.cache.get(id));
            else {
                const cResponse = await this.client.api.makeApiRequest(`/lol/challenges/v1/challenges/${id}/config`, {
                    region,
                    regional: false,
                    name: 'Challenge config by ID',
                    params: `Challenge ID: ${id}`
                });
                const pResponse = await this.client.api.makeApiRequest(`/lol/challenges/v1/challenges/${id}/percentiles`, {
                    region,
                    regional: false,
                    name: 'Challenge percentiles by ID',
                    params: `Challenge ID: ${id}`
                });
                if (cResponse.status !== 200)
                    reject(cResponse);
                else if (pResponse.status !== 200)
                    reject(pResponse);
                else {
                    const data = cResponse.data;
                    const percentiles = pResponse.data;
                    const challenge = new structures_1.Challenge(this.client, data, percentiles);
                    if (cache)
                        this.cache.set(id, challenge);
                    resolve(challenge);
                }
            }
        });
    }
    /**
     * Fetch the leader board of a challenge.
     * @param id - The ID of the challenge whose leaderboard you want to find.
     * @param level - The tier of the leaderboard.
     * @param options - The basic fetching options, with an additional limit option. Limit (or count) is 200 by default.
     */
    async fetchLeaderboard(id, level, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        const limit = options?.limit ?? 200;
        return new Promise(async (resolve, reject) => {
            if (!force && this.leaderBoardCache.has(region) && this.leaderBoardCache.get(region)?.has(level))
                resolve(this.leaderBoardCache.get(region)?.get(level));
            else {
                const response = await this.client.api.makeApiRequest(`/lol/challenges/v1/challenges/${id}/leaderboards/by-level/${level}?limit=${limit}`, {
                    region,
                    regional: false,
                    name: 'Challenge leaderboard by level',
                    params: `Challenge ID: ${id}, Level: ${level}`
                });
                if (response.status !== 200)
                    reject(response);
                else {
                    const data = response.data;
                    const result = data.map((rank) => new structures_1.ChallengeRank(this.client, rank, level));
                    if (cache) {
                        if (!this.leaderBoardCache.has(region))
                            this.leaderBoardCache.set(region, new collection_1.Collection());
                        this.leaderBoardCache.get(region)?.set(level, result);
                    }
                    resolve(result);
                }
            }
        });
    }
    /**
     * Fetch the progress of a summoner in the challenges.
     * @param playerId - The player ID (puuid) of the summoner whose progress you want to find.
     * @param options - The basic fetching options.
     */
    async fetchSummonerProgression(playerId, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (!force && this.summonerProgressionCache.has(playerId))
                resolve(this.summonerProgressionCache.get(playerId));
            else {
                const response = await this.client.api.makeApiRequest(`/lol/challenges/v1/player-data/${playerId}`, {
                    region,
                    regional: false,
                    name: 'Challenge progression by summoner ID',
                    params: `Summoner ID: ${playerId}`
                });
                if (response.status !== 200)
                    reject(response);
                else {
                    const data = response.data;
                    const result = new structures_1.SummonerChallenge(this.client, data);
                    if (cache)
                        this.summonerProgressionCache.set(playerId, result);
                    resolve(result);
                }
            }
        });
    }
}
exports.ChallengeManager = ChallengeManager;
//# sourceMappingURL=ChallengeManager.js.map