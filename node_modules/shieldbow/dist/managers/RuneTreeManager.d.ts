import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { Rune, RuneTree } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * A rune trees manager - to fetch and manage rune trees data.
 */
export declare class RuneTreeManager implements BaseManager<RuneTree> {
    /**
     * A collection of the rune trees cached in the memory.
     *
     * Only use this if you absolutely must.
     * Prioritize using {@link RuneTreeManager.fetch | fetch} instead.
     */
    readonly cache: Collection<string, RuneTree>;
    /**
     * The client this manager belongs to.
     */
    readonly client: Client;
    private readonly _runesData?;
    /**
     * Create a new rune trees manager.
     * @param client - The client this manager belongs to.
     * @param cacheSettings - The basic caching settings.
     */
    constructor(client: Client, cacheSettings: {
        enable: boolean;
        root: string;
    });
    /**
     * An array of runes that have been saved in the cache.
     *
     * This is similar to the cache but the cache is a collection of Rune Trees and this is an array of runes.
     *
     * Only use this if you absolutely must.
     * Prioritize using {@link RuneTreeManager.fetchRune | fetchRune} instead.
     */
    get cachedRunes(): Rune[];
    private _fetchLocalRunes;
    private _fetchAll;
    /**
     * Fetch a rune tree by its key. The key is the same as the rune tree's name, for example - `Domination`.
     *
     * @param key - The key of the rune tree to fetch.
     * @param options - Additional fetch options.
     */
    fetch(key: string, options?: FetchOptions): Promise<RuneTree>;
    /**
     * Fetch a rune by its key. The key is mostly the same as the rune name, for example - `Electrocute`.
     *
     * @param key - The key of the rune.
     * @param options - Additional fetch options.
     */
    fetchRune(key: string, options?: FetchOptions): Promise<Rune>;
    /**
     * Find a rune tree by its name.
     *
     * @deprecated Please use {@link RuneTreeManager.fetchByName | fetchByName} instead.
     * @param name - The name of the rune tree to look for.
     */
    findByName(name: string): Promise<RuneTree | undefined>;
    /**
     * Fetch a rune tree by its name.
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the rune tree to look for.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<RuneTree | undefined>;
    /**
     * Find a rune by its name.
     *
     * @deprecated Please use {@link RuneTreeManager.fetchRuneByName | fetchRuneByName} instead.
     * @param name - The name of the rune to look for.
     */
    findRuneByName(name: string): Promise<Rune | undefined>;
    /**
     * Fetch a rune by its name.
     * The search is case-insensitive.
     * The special characters are not ignored.
     *
     * @param name - The name of the rune to look for.
     * @param options - The basic fetching options.
     */
    fetchRuneByName(name: string, options?: FetchOptions): Promise<Rune | undefined>;
    /**
     * Find a rune tree by its numerical ID.
     *
     * @deprecated Please use {@link RuneTreeManager.fetchById | fetchById} instead.
     * @param id - The numerical ID of the rune tree to look for.
     */
    findById(id: number): Promise<RuneTree | undefined>;
    /**
     * Find a rune tree by its numerical ID.
     *
     * @param id - The numerical ID of the rune tree to look for.
     * @param options - The basic fetching options.
     */
    fetchById(id: number, options?: FetchOptions): Promise<RuneTree | undefined>;
    /**
     * Find a rune by its numerical ID.
     *
     * @deprecated Please use {@link RuneTreeManager.fetchRuneById | fetchRuneById} instead.
     * @param id - The numerical ID of the rune to look for.
     */
    findRuneById(id: number): Promise<Rune | undefined>;
    /**
     * Fetch a rune by its numerical ID.
     *
     * @param id - The numerical ID of the rune to look for.
     * @param options - The basic fetching options.
     */
    fetchRuneById(id: number, options?: FetchOptions): Promise<Rune | undefined>;
}
//# sourceMappingURL=RuneTreeManager.d.ts.map