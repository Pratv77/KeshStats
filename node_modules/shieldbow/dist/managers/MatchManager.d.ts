import type { BaseManager, FetchOptions, MatchByPlayerOptions } from '../types';
import { Match, type Summoner, MatchTimeline } from '../structures';
import { Collection } from '@discordjs/collection';
import type { Client } from '../client';
/**
 * A match manager - to fetch and manage matches.
 */
export declare class MatchManager implements BaseManager<Match> {
    /**
     * The collection of cached matches.
     *
     * Only use this if you absolutely must.
     * Prioritize using
     * {@link MatchManager.fetch | fetch} and
     * {@link MatchManager.fetchMatchListByPlayer | fetchMatchListByPlayer}
     * instead.
     */
    readonly cache: Collection<string, Match>;
    /**
     * The collection of cached match timelines.
     *
     * Only use this if you absolutely must.
     * Prioritize using {@link MatchManager.fetchMatchTimeline | fetchMatchTimeline} instead.
     */
    readonly timelineCache: Collection<string, MatchTimeline>;
    /**
     * The client that instantiated the manager.
     */
    readonly client: Client;
    /**
     * Creates a new match manager.
     * @param client - The client that instantiated the manager.
     */
    constructor(client: Client);
    /**
     * Fetch a match by its ID.
     * @param id - The ID of the match
     * @param options - The basic fetch options
     */
    fetch(id: string, options?: FetchOptions): Promise<Match>;
    /**
     * Fetch a match timeline by the match ID.
     *
     * @param matchId - The ID of the match
     * @param options - The basic fetch options
     */
    fetchMatchTimeline(matchId: string, options?: FetchOptions): Promise<MatchTimeline>;
    /**
     * Fetch a list of match IDs by a player ID.
     *
     * @param player - The summoner or their player ID whose matches need to be fetched.
     * @param options - The options for filtering the matches.
     */
    fetchMatchListByPlayer(player: Summoner | string, options?: MatchByPlayerOptions): Promise<string[]>;
}
//# sourceMappingURL=MatchManager.d.ts.map