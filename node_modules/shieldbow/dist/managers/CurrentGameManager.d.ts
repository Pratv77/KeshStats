import type { BaseManager, FetchOptions } from '../types';
import type { Client } from '../client';
import { CurrentGame } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * A current game manager - to fetch and manage the live games.
 */
export declare class CurrentGameManager implements BaseManager<CurrentGame> {
    /**
     * The cached live games (mapped by summoner IDs).
     *
     * Only use this if you absolutely must.
     * Prioritize using
     * {@link CurrentGameManager.fetch | fetch} or
     * {@link CurrentGameManager.fetchFeatured | fetchFeatured}
     * instead.
     */
    readonly cache: Collection<string, CurrentGame>;
    /**
     * The client that instantiated the manager.
     */
    readonly client: Client;
    /**
     * Creates a new current game manager.
     * @param client - The client that instantiated the manager.
     */
    constructor(client: Client);
    /**
     * Fetches the live game for the given summoner ID.
     *
     * This method is a special case where the cache is ignored by default.
     *
     * @param id - The summoner ID to fetch the live game for.
     * @param options - The basic fetching options.
     */
    fetch(id: string, options?: FetchOptions): Promise<CurrentGame>;
    /**
     * Fetch a list of featured games.
     * These games are not cached.
     *
     * @param options - The basic fetching options (force and cache are ignored).
     */
    fetchFeatured(options?: FetchOptions): Promise<CurrentGame[]>;
}
//# sourceMappingURL=CurrentGameManager.d.ts.map