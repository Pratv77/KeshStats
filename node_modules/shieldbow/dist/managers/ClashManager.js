"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClashManager = void 0;
const structures_1 = require("../structures");
const collection_1 = require("@discordjs/collection");
/**
 * A clash manager - to fetch and store clash tournaments and related data.
 */
class ClashManager {
    /**
     * Creates a new clash manager.
     * @param client - The client that instantiated the manager.
     */
    constructor(client) {
        /**
         * The client that instantiated the manager.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The in-memory cache of tournaments.
         *
         * Only use this if you absolutely must.
         * Prioritize using
         * {@link ClashManager.fetch | fetch},
         * {@link ClashManager.fetchByTeamId | fetchByTeamId} or
         * {@link ClashManager.fetchAll | fetchAll}
         * instead.
         */
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The in-memory cache of the tournament teams.
         *
         * Only use this if you absolutely must.
         * Prioritize using {@link ClashManager.fetchTeam | fetchTeam} instead.
         */
        Object.defineProperty(this, "cachedTeams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The in-memory cache of the tournament players.
         *
         * Only use this if you absolutely must.
         * Prioritize using {@link ClashManager.fetchPlayer | fetchPlayer} instead.
         */
        Object.defineProperty(this, "cachedPlayers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.cache = new collection_1.Collection();
        this.cachedTeams = new collection_1.Collection();
        this.cachedPlayers = new collection_1.Collection();
    }
    /**
     * Fetches a tournament by its ID.
     * @param id - The ID of the tournament.
     * @param options - The basic fetch options.
     */
    async fetch(id, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cache.has(id) && !force)
                resolve(this.cache.get(id));
            else {
                const response = await this.client.api
                    .makeApiRequest(`/lol/clash/v1/tournaments/${id}`, {
                    region,
                    name: 'Get tournament by tournament ID',
                    regional: false,
                    params: `Tournament ID: ${id}`
                })
                    .catch(reject);
                if (response) {
                    const tournament = new structures_1.Tournament(response.data);
                    if (cache)
                        this.cache.set(id, tournament);
                    resolve(tournament);
                }
            }
        });
    }
    /**
     * Fetch all upcoming and active tournaments.
     *
     * @param options - The basic fetch options (force is ignored, always true).
     */
    async fetchAll(options) {
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            const response = await this.client.api
                .makeApiRequest(`/lol/clash/v1/tournaments`, {
                region,
                name: 'Get all upcoming and active tournaments',
                regional: false,
                params: `No parameters`
            })
                .catch(reject);
            if (response) {
                const tournaments = response.data.map((d) => new structures_1.Tournament(d));
                if (cache)
                    tournaments.forEach((t) => this.cache.set(t.id, t));
                resolve(tournaments);
            }
        });
    }
    /**
     * Fetch tournament by participating team's ID.
     * @param teamId - The ID of the team.
     * @param options - The basic fetch options (force is ignored, always true).
     */
    async fetchByTeamId(teamId, options) {
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            const response = await this.client.api
                .makeApiRequest(`/lol/clash/v1/tournaments/by-team/${teamId}`, {
                region,
                name: 'Get tournament by team ID',
                regional: false,
                params: `Team ID: ${teamId}`
            })
                .catch(reject);
            if (response) {
                const tournament = new structures_1.Tournament(response.data);
                if (cache)
                    this.cache.set(tournament.id, tournament);
                resolve(tournament);
            }
        });
    }
    /**
     * Fetch a team participating in a tournament by the team ID.
     * @param teamId - The ID of the team.
     * @param options - The basic fetch options.
     */
    async fetchTeam(teamId, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cachedTeams.has(teamId) && !force)
                resolve(this.cachedTeams.get(teamId));
            else {
                const response = await this.client.api
                    .makeApiRequest(`/lol/clash/v1/teams/${teamId}`, {
                    region,
                    name: 'Get team by team ID',
                    regional: false,
                    params: `Team ID: ${teamId}`
                })
                    .catch(reject);
                if (response) {
                    const team = new structures_1.TournamentTeam(this.client, response.data);
                    if (cache)
                        this.cachedTeams.set(teamId, team);
                    resolve(team);
                }
            }
        });
    }
    /**
     * Fetch participation info of a summoner in tournaments by the summoner ID.
     * @param summonerId - The ID of the summoner.
     * @param options - The basic fetch options.
     */
    async fetchPlayer(summonerId, options) {
        const force = options?.force ?? false;
        const cache = options?.cache ?? true;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cachedPlayers.has(summonerId) && !force)
                resolve(this.cachedPlayers.get(summonerId));
            const response = await this.client.api
                .makeApiRequest(`/lol/clash/v1/players/by-summoner/${summonerId}`, {
                region,
                name: 'Get tournament player by summoner ID',
                regional: false,
                params: `Summoner ID: ${summonerId}`
            })
                .catch(reject);
            if (response) {
                const data = response.data;
                const player = data.map((p) => new structures_1.TournamentPlayer(this.client, p.teamId, p));
                if (cache)
                    this.cachedPlayers.set(summonerId, player);
                resolve(player);
            }
        });
    }
}
exports.ClashManager = ClashManager;
//# sourceMappingURL=ClashManager.js.map