"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrentGameManager = void 0;
const structures_1 = require("../structures");
const collection_1 = require("@discordjs/collection");
/**
 * A current game manager - to fetch and manage the live games.
 */
class CurrentGameManager {
    /**
     * Creates a new current game manager.
     * @param client - The client that instantiated the manager.
     */
    constructor(client) {
        /**
         * The cached live games (mapped by summoner IDs).
         *
         * Only use this if you absolutely must.
         * Prioritize using
         * {@link CurrentGameManager.fetch | fetch} or
         * {@link CurrentGameManager.fetchFeatured | fetchFeatured}
         * instead.
         */
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The client that instantiated the manager.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.cache = new collection_1.Collection();
        this.client = client;
    }
    /**
     * Fetches the live game for the given summoner ID.
     *
     * This method is a special case where the cache is ignored by default.
     *
     * @param id - The summoner ID to fetch the live game for.
     * @param options - The basic fetching options.
     */
    async fetch(id, options) {
        const force = options?.force ?? true;
        const cache = options?.cache ?? false;
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            if (this.cache.has(id) && !force)
                resolve(this.cache.get(id));
            else {
                const response = await this.client.api
                    .makeApiRequest('/lol/spectator/v4/active-games/by-summoner/' + id, {
                    region,
                    regional: false,
                    name: 'Current match by summoner ID',
                    params: 'Summoner ID: ' + id
                })
                    .catch(reject);
                if (response) {
                    const data = response.data;
                    await this.client.champions.fetchByKeys(data.participants.map((p) => p.championId));
                    if (this.client.items.cache.size === 0)
                        await this.client.items.fetch('1001');
                    if (this.client.summonerSpells.cache.size === 0)
                        await this.client.summonerSpells.fetchByName('Flash');
                    if (this.client.runes.cache.size === 0)
                        await this.client.runes.fetch('Domination');
                    const game = new structures_1.CurrentGame(this.client, data);
                    if (cache)
                        this.cache.set(id, game);
                    resolve(game);
                }
            }
        });
    }
    /**
     * Fetch a list of featured games.
     * These games are not cached.
     *
     * @param options - The basic fetching options (force and cache are ignored).
     */
    async fetchFeatured(options) {
        const region = options?.region ?? this.client.region;
        return new Promise(async (resolve, reject) => {
            const response = await this.client.api
                .makeApiRequest('/lol/spectator/v4/featured-games', {
                region,
                regional: false,
                name: 'Featured matches',
                params: 'no params'
            })
                .catch(reject);
            if (response) {
                const data = response.data;
                for (const game of data.gameList)
                    await this.client.champions.fetchByKeys(game.participants.map((p) => p.championId));
                if (this.client.items.cache.size === 0)
                    await this.client.items.fetch('1001');
                if (this.client.summonerSpells.cache.size === 0)
                    await this.client.summonerSpells.fetchByName('Flash');
                if (this.client.runes.cache.size === 0)
                    await this.client.runes.fetch('Domination');
                const games = response.data.gameList.map((g) => new structures_1.CurrentGame(this.client, g));
                resolve(games);
            }
        });
    }
}
exports.CurrentGameManager = CurrentGameManager;
//# sourceMappingURL=CurrentGameManager.js.map