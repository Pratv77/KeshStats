"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageManager = void 0;
const tslib_1 = require("tslib");
const collection_1 = require("@discordjs/collection");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
/**
 * A basic manager for storing and fetching the local cached JSON files.
 */
class StorageManager {
    /**
     * Creates a new StorageManager instance.
     * @param client - The client this manager belongs to.
     * @param pathName - The path to the directory where the JSON files are stored.
     * @param root - The root directory of the project's storage.
     */
    constructor(client, pathName, root) {
        Object.defineProperty(this, "_root", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_pathName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * An in-memory cache that stores the JSON data to serve data faster.
         */
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * The client this Manager belongs to.
         */
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this._root = root;
        this._pathName = path_1.default.join(process.cwd(), root, pathName);
        this.cache = new collection_1.Collection();
    }
    /**
     * Fetch the locally stored JSON file by its name.
     *
     * @param id - The name of the JSON file.
     */
    fetch(id) {
        if (this.cache.has(id))
            return this.cache.get(id);
        const contentPath = path_1.default.join(this._pathName, id + '.json');
        const exists = fs_extra_1.default.existsSync(contentPath);
        if (!exists)
            return;
        const content = fs_extra_1.default.readFileSync(contentPath).toString();
        if (content.trim().length === 0) {
            // Detect file corruption #6
            fs_extra_1.default.unlinkSync(contentPath);
            return;
        }
        try {
            return JSON.parse(content);
        }
        catch (e) {
            throw new SyntaxError(`Invalid JSON file in cache encountered: ${contentPath}`);
        }
    }
    /**
     * Store a JSON file locally.
     *
     * @param id - The name of the JSON file.
     * @param data - The JSON data that needs to be stored.
     */
    store(id, data) {
        const contentPath = path_1.default.join(this._pathName, id + '.json');
        const exists = fs_extra_1.default.existsSync(contentPath);
        if (exists)
            throw new Error('The data already exists. A redundant request is being made: ' + contentPath);
        else {
            fs_extra_1.default.ensureFileSync(contentPath);
            fs_extra_1.default.writeFileSync(contentPath, JSON.stringify(data, null, 2));
            this.cache.set(id, data);
        }
    }
    /**
     * The path of the base directory to fetch/store files from/in
     */
    get pathName() {
        return this._pathName;
    }
    set pathName(newPath) {
        this._pathName = path_1.default.join(process.cwd(), this._root, newPath);
    }
}
exports.StorageManager = StorageManager;
//# sourceMappingURL=StorageManager.js.map