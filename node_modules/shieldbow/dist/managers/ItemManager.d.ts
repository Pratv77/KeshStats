import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { Item } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * An item manager - to fetch and manage all item data.
 */
export declare class ItemManager implements BaseManager<Item> {
    /**
     * A collection of the items cached in the memory.
     *
     * Only use this if you absolutely must.
     * Prioritize using {@link ItemManager.fetch | fetch} instead.
     */
    readonly cache: Collection<string, Item>;
    /**
     * The client this manager belongs to.
     */
    readonly client: Client;
    private readonly _itemData?;
    /**
     * Create a new item manager.
     *
     * @param client - The client this manager belongs to.
     * @param cacheSettings - The basic caching settings.
     */
    constructor(client: Client, cacheSettings: {
        enable: boolean;
        root: string;
    });
    private _fetchLocalItems;
    private _fetchAll;
    /**
     * Fetch an item by its 4-digit ID. The ID must be a string of 4 digits (not a number)
     *
     * @param key - The ID of the item to fetch.
     * @param options - The basic fetching options.
     */
    fetch(key: string, options?: FetchOptions): Promise<Item>;
    /**
     * Find an item by its name.
     *
     * @deprecated Please use {@link ItemManager.fetchByName | fetchByName} instead.
     * @param name - The name of the item to look for.
     */
    findByName(name: string): Promise<Item | undefined>;
    /**
     * Fetch an item by its name.
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the item to look for.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<Item | undefined>;
}
//# sourceMappingURL=ItemManager.d.ts.map