import type { Client } from '../client';
import type { BaseManager, FetchOptions } from '../types';
import { Tournament, TournamentPlayer, TournamentTeam } from '../structures';
import { Collection } from '@discordjs/collection';
/**
 * A clash manager - to fetch and store clash tournaments and related data.
 */
export declare class ClashManager implements BaseManager<Tournament> {
    /**
     * The client that instantiated the manager.
     */
    readonly client: Client;
    /**
     * The in-memory cache of tournaments.
     *
     * Only use this if you absolutely must.
     * Prioritize using
     * {@link ClashManager.fetch | fetch},
     * {@link ClashManager.fetchByTeamId | fetchByTeamId} or
     * {@link ClashManager.fetchAll | fetchAll}
     * instead.
     */
    readonly cache: Collection<number, Tournament>;
    /**
     * The in-memory cache of the tournament teams.
     *
     * Only use this if you absolutely must.
     * Prioritize using {@link ClashManager.fetchTeam | fetchTeam} instead.
     */
    readonly cachedTeams: Collection<string, TournamentTeam>;
    /**
     * The in-memory cache of the tournament players.
     *
     * Only use this if you absolutely must.
     * Prioritize using {@link ClashManager.fetchPlayer | fetchPlayer} instead.
     */
    readonly cachedPlayers: Collection<string, TournamentPlayer[]>;
    /**
     * Creates a new clash manager.
     * @param client - The client that instantiated the manager.
     */
    constructor(client: Client);
    /**
     * Fetches a tournament by its ID.
     * @param id - The ID of the tournament.
     * @param options - The basic fetch options.
     */
    fetch(id: number, options?: FetchOptions): Promise<Tournament>;
    /**
     * Fetch all upcoming and active tournaments.
     *
     * @param options - The basic fetch options (force is ignored, always true).
     */
    fetchAll(options?: FetchOptions): Promise<Tournament[]>;
    /**
     * Fetch tournament by participating team's ID.
     * @param teamId - The ID of the team.
     * @param options - The basic fetch options (force is ignored, always true).
     */
    fetchByTeamId(teamId: string, options?: FetchOptions): Promise<Tournament>;
    /**
     * Fetch a team participating in a tournament by the team ID.
     * @param teamId - The ID of the team.
     * @param options - The basic fetch options.
     */
    fetchTeam(teamId: string, options?: FetchOptions): Promise<TournamentTeam>;
    /**
     * Fetch participation info of a summoner in tournaments by the summoner ID.
     * @param summonerId - The ID of the summoner.
     * @param options - The basic fetch options.
     */
    fetchPlayer(summonerId: string, options?: FetchOptions): Promise<TournamentPlayer[]>;
}
//# sourceMappingURL=ClashManager.d.ts.map