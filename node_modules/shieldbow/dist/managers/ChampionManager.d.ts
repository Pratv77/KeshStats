import type { BaseManager, FetchOptions } from '../types';
import type { Client } from '../client';
import { Collection } from '@discordjs/collection';
import { Champion } from '../structures';
/**
 * A champion manager - to fetch and manage all the champion data.
 */
export declare class ChampionManager implements BaseManager<Champion> {
    /**
     * The champions cached in the memory.
     *
     * Only use this if you absolutely must.
     * Prioritize using
     * {@link ChampionManager.fetch | fetch},
     * {@link ChampionManager.fetchByKey | fetchByKey },
     * {@link ChampionManager.fetchByName | fetchByName} or
     * {@link ChampionManager.fetchAll | fetchAll}
     * instead.
     */
    readonly cache: Collection<string, Champion>;
    /**
     * The champion rotations cached in the memory.
     *
     * Only use this if you absolutely must.
     * Prioritize using
     * {@link ChampionManager.fetchRotations | fetchRotations}
     */
    readonly rotation: Collection<'all' | 'new', Champion[]>;
    /**
     * The client that this manager belongs to.
     */
    readonly client: Client;
    private readonly _champData?;
    private readonly _damageData?;
    private readonly _pricingData?;
    /**
     * Create a new Champions Manager
     *
     * @param client - The client this manager belongs to.
     * @param cacheSettings - The basic caching settings.
     */
    constructor(client: Client, cacheSettings: {
        enable: boolean;
        root: string;
    });
    private _fetchLocalChamp;
    private _fetchLocalPricing;
    private _fetchLocalDamage;
    /**
     * Fetch all the champions and store it in the cache.
     *
     * This always fetches freshly from data dragon and community dragon.
     *
     * @param options - The basic fetching options (only `cache` affects this method).
     */
    fetchAll(options?: FetchOptions): Promise<Collection<string, Champion>>;
    /**
     * Fetches a champion (from the cache, if already available), or from data dragon and community dragon.
     * @param id - The {@link Champion.id | ID} of the champion whose data needs to be fetched.
     * @param options - The basic fetching options.
     */
    fetch(id: string, options?: FetchOptions): Promise<Champion>;
    /**
     * Find a champion by their 3-digit key.
     *
     * @deprecated Use {@link ChampionManager.fetchByKey | fetchByKey} instead.
     * @param key - The 3-digit key of the champion to look for.
     */
    findByKey(key: number): Promise<Champion | undefined>;
    /**
     * Find a champion by their name.
     *
     * @deprecated Use {@link ChampionManager.fetchByName | fetchByName} instead.
     * @param name - The name of the champion to look for.
     */
    findByName(name: string): Promise<Champion | undefined>;
    /**
     * Fetch and cache champion by their name (instead of ID, which is very similar but not the same as the name).
     * The search is case-insensitive.
     * The special characters are NOT ignored.
     *
     * @param name - The name of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByName(name: string, options?: FetchOptions): Promise<Champion | undefined>;
    /**
     * Fetch and cache champion by their unique 3-digit keys.
     *
     * This is mostly for internal use while fetching match (or live match) data to improve performance.
     *
     * @param key - The key of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByKey(key: number, options?: FetchOptions): Promise<Champion | undefined>;
    /**
     * Fetch and cache champions by their names.
     *
     * @param names - The names of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByNames(names: string[], options?: FetchOptions): Promise<Collection<string, Champion>>;
    /**
     * Fetch and cache champions by their unique 3-digit keys.
     *
     * This is mostly for internal use while fetching match (or live match) data to improve performance.
     * Ideally, any user would be using {@link ChampionManager.fetch | fetch}.
     *
     * @param keys - The keys of the champions to fetch.
     * @param options - The basic fetching options.
     */
    fetchByKeys(keys: number[], options?: FetchOptions): Promise<Collection<string, Champion>>;
    /**
     * Fetch champion rotation data from Champion v3 API.
     *
     * This is the only method that needs a valid API key in this manager.
     *
     * @param options - The basic fetching options.
     */
    fetchRotations(options?: FetchOptions): Promise<Collection<"all" | "new", Champion[]>>;
}
//# sourceMappingURL=ChampionManager.d.ts.map